<?php

declare(strict_types=1);

namespace App\Listener;

use Hyperf\Di\Annotation\Inject;
use Hyperf\Event\Annotation\Listener;
use Hyperf\Event\Contract\ListenerInterface;
use Hyperf\Validation\Contract\ValidatorFactoryInterface;
use Hyperf\Validation\Event\ValidatorFactoryResolved;
use Hyperf\Validation\Validator;
use Japool\Genconsole\Help\IdCardHelp;

#[Listener]
class ValidatorFactoryResolvedListener implements ListenerInterface
{
    #[Inject]
    private ?IdCardHelp $IdCardHelp;

    public function listen(): array
    {
        return [
            ValidatorFactoryResolved::class,
        ];
    }

    public function process(object $event): void
    {
        /**  @var ValidatorFactoryInterface $validatorFactory */
        $validatorFactory = $event->validatorFactory;

        $validatorFactory->extend('chinese', function ($attribute, $value, $parameters, $validator) {
            return $validator->validateRegex($attribute, $value, ['/^[\x{4e00}-\x{9fa5}·]{2,10}$/u']);
            //支持生僻字
            //return $validator->validateRegex($attribute, $value, ['/^[\x{3400}-\x{9FFF}\x{F900}-\x{FAFF}\x{20000}-\x{2FFFF}·\s]{2,30}$/u']);
        });
        $validatorFactory->replacer('chinese', function ($message, $attribute, $rule, $parameters) {
            return str_replace(':chinese', $attribute, $message);
        });

        //金额
        $validatorFactory->extend('money', function ($attribute, $value, $parameters, $validator) {
            return $validator->validateRegex($attribute, $value, ['/^\d+(\.\d{1,' . $decimals . '})?$/']);
        });
        $validatorFactory->replacer('money', function ($message, $attribute, $rule, $parameters) {
            return str_replace(':money', $attribute, $message);
        });

        $validatorFactory->extend('mobile', function ($attribute, $value, $parameters, $validator) {
            return $validator->validateRegex($attribute, $value, ['/^1(3\d|4[5-9]|5[0-35-9]|6[2567]|7[0-8]|8\d|9[0-35-9])\d{8}$/']);
        });
        $validatorFactory->replacer('mobile', function ($message, $attribute, $rule, $parameters) {
            return str_replace(':mobile', $attribute, $message);
        });
        
        $validatorFactory->extend('id_card', function ($attribute, $value, $parameters, $validator) {
            return $this->IdCardHelp->setId($value)->isValidate();
        });
        $validatorFactory->replacer('id_card', function ($message, $attribute, $rule, $parameters) {
            return str_replace(':id_card', $attribute, $message);
        });
    }
}