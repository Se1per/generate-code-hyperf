<?php

declare(strict_types=1);

namespace App\Exception\Handler;

use App\Base\src\LogMonMain;
use Hyperf\Context\Context;
use Hyperf\Contract\ContainerInterface;
use Hyperf\ExceptionHandler\ExceptionHandler;
use Hyperf\HttpMessage\Stream\SwooleStream;
use Psr\Http\Message\ResponseInterface;
use Throwable;
use function Hyperf\Support\env;

class ApiExceptionHandler extends ExceptionHandler
{
    protected $logMonMain;

    public function __construct(ContainerInterface $container)
    {
        $this->logMonMain = $container->get(LogMonMain::class);
    }

    public function handle(Throwable $throwable, ResponseInterface $response)
    {
        $request_info  = Context::get('request_info');

        $errorMessage = sprintf(
            "\nDate: %s\nMessage: %s\nLine: %d\nFile: %s\nRequestId: %s",
            date("Y-m-d H:i:s"),
            $throwable->getMessage(),
            $throwable->getLine(),
            $throwable->getFile(),
            $request_info['request_id'],
        );

        // 返回 JSON 响应
        $data = [
            'code' => $throwable->getCode(),
            'message' => $throwable->getMessage(),
            'request_id' => $request_info['request_id'],
        ];

        if(env('APP_ENV') == 'pro'){
            $this->stopPropagation();
            $this->logMonMain->error('error',$errorMessage);
        }else{
            $this->logMonMain->error('debug',$errorMessage);
            $data['line'] = $throwable->getLine();
            $data['file'] = $throwable->getFile();
        }

        return $response->withHeader('Server', 'Hyperf')->withStatus(200)->withBody(new SwooleStream(json_encode($data)));
    }

    public function isValid(Throwable $throwable): bool
    {
        return true;
    }
}
