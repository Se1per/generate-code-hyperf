<?php

declare(strict_types=1);

namespace App\Exception\Handler;

use App\Base\src\LogMonMain;
use Hyperf\Contract\ContainerInterface;
use Hyperf\ExceptionHandler\ExceptionHandler;
use Hyperf\HttpMessage\Stream\SwooleStream;
use Psr\Http\Message\ResponseInterface;
use Throwable;

class ApiExceptionHandler extends ExceptionHandler
{
    protected $logMonMain;

    public function __construct(ContainerInterface $container)
    {
        $this->logMonMain = $container->get(LogMonMain::class);
    }

    public function handle(Throwable $throwable, ResponseInterface $response)
    {
       // 判断被捕获到的异常是希望被捕获的异常
        if (!$throwable instanceof \Exception) {
            // 交给下一个异常处理器
            return $response;
        }
        // 格式化输出
        $data = json_encode([
            'code' => 504001,
            'status' => 'error',
            'message' => '操作异常:请稍后再试',
        ], JSON_UNESCAPED_UNICODE);

        // 阻止异常冒泡
        $this->stopPropagation();
        
        $errorMessage = sprintf(
            "\nDate: %s\nMessage: %s\nLine: %d\nFile: %s",
            date("Y-m-d H:i:s"),
            $throwable->getMessage(),
            $throwable->getLine(),
            $throwable->getFile()
        );

        $this->logMonMain->error('error',$errorMessage);

        return $response->withStatus(500)->withBody(new SwooleStream($data));
    }

    public function isValid(Throwable $throwable): bool
    {
        return true;
    }
}
