<?php

declare(strict_types=1);

namespace App\Base\src;


use App\Constants\CodeConstants;

use App\Exception\ApiException;
use Hyperf\Config\Annotation\Value;

use Hyperf\Coroutine\Exception\ParallelExecutionException;
use Hyperf\Coroutine\Parallel;
use Hyperf\DbConnection\Db;
use Hyperf\Di\Annotation\Inject;
use SplQueue;

abstract class RepositoryPackage
{
    protected $model;

    #[Value('generator')]
    protected array $config;
    
    #[Inject]
    private ?LogMonMain $logMonMain;

    protected $user;

    public function model(): string
    {
        return $this->config['general']['model'] . '\\' . str_replace('Repository', '', $this->class_basename(get_class($this)));
    }

    public function __construct()
    {
        $this->makeModel();

        return $this;
    }

    public function makeModel()
    {
        return $this->setModel($this->model());
    }

    public function setModel($eloquentModel)
    {
        if (!class_exists($eloquentModel)) {
            throw new ApiException(CodeConstants::ERROR, '模型不存在');
        }

        return $this->model = new $eloquentModel();
    }

    public function class_basename($class)
    {
        $class = is_object($class) ? get_class($class) : $class;

        return basename(str_replace('\\', '/', $class));
    }

    /**
     * 保存数据
     * @param $data
     * @return mixed
     */
    public function saveData($data): mixed
    {
        try {

            $createData = $this->model->create($data);

        } catch (\Throwable $e) {
            throw new ApiException(CodeConstants::ERROR, $e->getMessage());
        }

        return $createData;
    }

    /**
     * 批量插入数据 协程
     * @param $data
     * @param int $unpack
     * @return array
     */
    public function saveAllData($data, int $unpack = 5): array
    {
        $startTime = microtime(true);

        $dataNum = count($data);

        if ($dataNum > $unpack) {
            foreach ($data as &$val) {
                $val['created_at'] = date('Y-m-d H:i:s');
                $val['updated_at'] = date('Y-m-d H:i:s');
            }
        }

        $data = array_chunk($data, $unpack);

        $num = $this->divideByTwo(count($data));

        $parallel = new Parallel($num);

        foreach ($data as $value) {
            $parallel->add(function () use ($value) {
                return $this->model->insert($value);
            });
        }

        try {

            $results = $parallel->wait();

            $endTime = microtime(true);

            $executionTime = $endTime - $startTime;

            $this->logMonMain->info('db_log', 'saveAllData', [
                'count' => count($data),
                'executionTime' => $executionTime
            ]);

        } catch (ParallelExecutionException $e) {
            $results = $e->getResults();
            $endTime = microtime(true);
            $executionTime = $endTime - $startTime;
            $this->logMonMain->error('db_log', 'saveAllData', [
                'count' => count($data),
                'executionTime' => $executionTime,
                'error' => $e->getResults(),
                'Throwables' => $e->getThrowables(),
            ]);
            throw new ApiException(CodeConstants::ERROR, json_encode($results));
        }

        return $results;
    }

    /**
     * 更新数据(单个更新数据,检测数据是否需要更新)
     * @param $data
     * @param string $key
     * @return mixed
     */
    public function updateData($data, string $key = 'id'): mixed
    {
        $object = $this->getDataFindBy($key, $data[$key]);

        try {

            $needsUpdate = $this->inspectUpdateData($object, $data);

            if ($needsUpdate) {
                unset($data[$key]);
                $object = $object->update($data);
            }

        } catch (\Throwable $e) {
            throw new ApiException(CodeConstants::ERROR, $e->getMessage());
        }

        return $object;
    }

    /**
     * 批量更新数据(不检查是否需要更新直接批量更新)
     * @param $data
     * @param string $key
     * @param int $unpack
     * @return array
     */
    public function updateAllData($data, string $key = 'id', int $unpack = 5): array
    {
        $startTime = microtime(true);

        $num = $this->divideByTwo(count($data));

        $dataNum = count($data);

        $parallel = new Parallel($num);

        if ($dataNum > $unpack) {
            $data = array_chunk($data, $unpack);
        } else {
            $data[] = $data;
        }

        foreach ($data as $val) {
            $parallel->add(function () use ($key, $val) {
                return $this->updateBatch($val, $key);
            });
        }

        try {
            $results = $parallel->wait();
            $endTime = microtime(true);

            $executionTime = $endTime - $startTime;
            $this->logMonMain->info('db_log', 'updateAllData', [
                'count' => count($data),
                'executionTime' => $executionTime
            ]);

            return [true, $results];

        } catch (ParallelExecutionException $e) {
            $results = $e->getResults();
            $endTime = microtime(true);
            $executionTime = $endTime - $startTime;
            $this->logMonMain->error('db_log', 'updateAllData', [
                'count' => count($data),
                'executionTime' => $executionTime,
                'error' => $e->getResults(),
                'Throwables' => $e->getThrowables(),
            ]);
            return [false, $results];
        }
    }

    /**
     * 批量更新基类
     * @param array $inputs
     * @param string $where_field
     * @param string $when_field
     * @return mixed
     * $value = [
     * *     [
     * *         'id' => 1,
     * *         'status' => 'active',
     * *         'nickname' => 'Mohammad'
     * *     ],
     * *     [
     * *         'id' => 5,
     * *         'status' => 'deactive',
     * *         'nickname' => 'Ghanbari'
     * *     ],
     * *     [
     * *         'id' => 7,
     * *         'status' => 'deactive',
     * *         'nickname' => 'Ghanbari'
     * *     ]
     * * ];
     */
    public function updateBatch(array $inputs, string $where_field = 'id', string $when_field = 'id'): mixed
    {
        if (empty($inputs)) {
            throw new \InvalidArgumentException('The update data is empty.');
        }

        if (!($where = $this->array_pluck($inputs, $where_field)) || !($when = $this->array_pluck($inputs, $when_field))) {
            throw new \InvalidArgumentException('Missing update condition');
        }
        $when_arr = [];
        foreach ($inputs as $k => $input) {
            $when_val = $input[$when_field] ?? '';
            foreach ($input as $key => $value) {
                if ($key == $when_field) continue;
                $when_arr[$key][] = "when {$when_field} = '{$when_val}' then '{$value}'";
            }
        }

        foreach ($when_arr as $key => &$item) {
            $item = DB::raw('case ' . implode(' ', $item) . ' end ');
        }

        return $this->model->whereIn($where_field, $where)->update($when_arr);
    }

    /**
     * 自增某字段
     * @param $field
     * @param int $value
     * @return mixed
     */
    public function increment($field, int $value = 1): mixed
    {

        try {
            return  $this->model->increment($field,$value);
        } catch (\Throwable $e) {
            throw new ApiException(CodeConstants::ERROR, $e->getMessage());
        }
    }

    /**
     * 自减某字段
     * @param $field
     * @param int $value
     * @return mixed
     */
    public function decrement($field,int $value = 1): mixed
    {
        try {

            return $this->model->decrement($field,$value);

        } catch (\Throwable $e) {
            throw new ApiException(CodeConstants::ERROR, $e->getMessage());
        }
    }

    /**
     * 删除数据
     * @param $data
     * @param string $key
     * @return bool
     */
    public function deleteData($data, string $key = 'id'): bool
    {
        try {

            $this->model->where($key, $data[$key])->delete();

        } catch (\Throwable $e) {
            throw new ApiException(CodeConstants::ERROR, $e->getMessage());
        }
        return true;
    }

    /**
     * 获取单条数据
     * @param $attribute
     * @param $value
     * @param string $symbol
     * @param array $columns
     * @return mixed
     */
    public function getDataFindBy($attribute, $value, string $symbol = '=', array $columns = array('*')): mixed
    {
        return $this->model->where($attribute, $symbol, $value)->first($columns);
    }

    /**
     * 获取数据集
     * @param $attribute
     * @param $value
     * @param string $symbol
     * @param array $columns
     * @return mixed
     */
    public function getDataAllBy($attribute, $value, string $symbol = '=', array $columns = array('*')): mixed
    {
        return $this->model->where($attribute, $symbol, $value)->get($columns);
    }

    /**
     * 获取游标对象
     * @return mixed
     */
    public function getCursorDataAll(): mixed
    {
        return $this->model->cursor();
    }

    /**
     * 获取数据集
     * @param $attribute
     * @param array $value
     * @param array $columns
     * @return mixed
     */
    public function getDataInBy($attribute, array $value, array $columns = array('*')): mixed
    {
        return $this->model->whereIn($attribute, $value)->get($columns);
    }

    /**
     * 执行数据层构造
     * @param array $data
     * @param $model
     * @return mixed
     */
    public function getCount(array $data = [], $model = null): mixed
    {
        return $this->runningSql($data, false, 'count', $model);
    }

    /**
     * 统一执行sql
     * @param array $data
     * @param string|array $get
     * @param $model
     * @param bool $cache
     * @param bool $needToArray
     * @return mixed
     */
    public function getData(array $data = [], string|array $get = 'get', $model = null, bool $cache = false, bool $needToArray = false): mixed
    {
        if ($cache) {
            $key = $this->model->getKeyName();
            switch ($get) {
                case 'find':
                case 'first':
                    $ids = $this->runningSql($data, true, ['pluck' => $key], $model);
                    return $this->findFromCache(array_shift($ids));
                default:
                case 'get':
                    $ids = $this->runningSql($data, true, ['pluck' => $key], $model);
                    return $this->findManyFromCache($ids);
            }
        }

        return $this->runningSql($data, $needToArray, $get, $model);
    }

    /**
     * 执行底层sql
     * @param $data
     * @param bool $needToArray
     * @param string $get
     * @param $object
     * @return mixed
     */
    public function runningSql($data, bool $needToArray = false, string|array $get = 'get', $object = null): mixed
    {
        if (!$object) {
            $object = $this->model;
        }

        foreach ($data as $k => $val) {
            if ($get == 'count' && $k == 'skip') continue;
            if ($k == 'with') {
                $object = $object->$k($val);
                continue;
            }

            if ($k == 'skip') {
                $object = $object->skip($val['page'])->take($val['limit']);
                continue;
            }

            switch ($this->array_depth($val)) {
                case 1;
                    $object = $object->$k(...$val);
                    break;
                case 2;
                    if ($k == 'whereIn' || $k == 'whereBetween') {
                        $object = $object->$k(...$val);
                    } else if ($k == 'where' || $k == 'orderBy') {
                        foreach ($val as $vv) {
                            $object = $object->$k(...$vv);
                        }
                    } else {
                        $object = $object->$k($val);
                    }
                    break;
                case 3;
                    foreach ($val as $vv) {
                        $object = $object->$k(...$vv);
                    }
                break;
            }
        }

        switch ($get) {
            case 'chunk':
            case 'cursor':
                return $object;
        }

        if (is_array($get)) {
            $key = key($get);
            $list = $object->$key($get[$key]);
            $get = $key;
        } else {
            $list = $object->$get();
        }

        switch ($get) {
            case 'pluck':
            case 'first':
                if ($list && $needToArray) $list = $list->toArray();
                break;
            case 'get':
                if ($needToArray) $list = $list->toArray();
                break;
        }

        return $list;
    }

    /**
     * 批量查询缓存
     * @param $ids
     * @return mixed
     */
    public function findManyFromCache($ids)
    {
        return $this->model->findManyFromCache($ids);
    }

    /**
     * 查询单个缓存
     * @param $ids
     * @return mixed
     */
    public function findFromCache($ids)
    {
        return $this->model->findFromCache($ids);
    }

    /**
     * 判断数据是否二维或者一维数组
     * @param $array
     * @return int
     */
    public function array_depth($array): int
    {
        if (!is_array($array)) {
            return 0;
        }

        $depth = 1;
        $queue = new SplQueue();
        array_walk($array, function ($element) use ($queue) {
            if (is_array($element)) {
                $queue->enqueue($element);
            }
        });

        while (!$queue->isEmpty()) {
            $currentLevelSize = $queue->count();
            for ($i = 0; $i < $currentLevelSize; $i++) {
                $current = $queue->dequeue();
                array_walk($current, function ($element) use ($queue) {
                    if (is_array($element)) {
                        $queue->enqueue($element);
                    }
                });
            }
            $depth++;
        }

        return $depth;
    }

    /**
     * 根据数组条数获取/2得协程数,最大限制 50个协程运行
     * @param $number
     * @param int $num
     * @param int $max
     * @return int
     */
    public function divideByTwo($number, int $num = 2, int $max = 50): int
    {
        $num = intdiv($number, $num);

        if ($num > $max) {
            $num = $max;
        }

        return $num;
    }

    public function array_pluck(array $array, string $key)
    {
        return array_map(function ($item) use ($key) {
            return $item[$key] ?? null;
        }, $array);
    }

    /**
     * 判断数据是否需要更新
     * @param $object
     * @param $data
     * @return bool
     */
    public function inspectUpdateData($object, $data): bool
    {
        // 标识是否需要更新
        $needsUpdate = false;

        // 遍历客户端传来的数据
        foreach ($data as $key => $value) {
            // 检查是否存在该字段且与数据库中的值不一致
            if (array_key_exists($key, $object->getAttributes()) && $object->$key != $value) {
                $needsUpdate = true; // 标记需要更新
            }
        }

        return $needsUpdate;
    }

}