<?php

declare(strict_types=1);

namespace App\Base\src;

use Hyperf\Coroutine\Exception\ParallelExecutionException;
use Hyperf\Coroutine\Parallel;
use Hyperf\DbConnection\Db;
use SplQueue;

trait RepositoryPackage
{
    public function saveData($data): array
    {
        try {

            $createData = $this->model->create($data);

        } catch (\Exception $e) {

            return [false, $e->getMessage()];
        }

        return [true, $createData];
    }

    /**
     * 批量插入数据 协程
     * @param $data
     * @param int $unpack
     * @return array
     */
    public function saveAllData($data, int $unpack = 5): array
    {
        $dataNum = count($data);

        if ($dataNum > $unpack) {
            foreach ($data as &$val) {
                $val['created_at'] = date('Y-m-d H:i:s');
                $val['updated_at'] = date('Y-m-d H:i:s');
            }
            $data = array_chunk($data, $unpack);
        }

        $num = $this->divideByTwo(count($data));

        $parallel = new Parallel($num);

        Db::beginTransaction();

        foreach ($data as $value) {
            $parallel->add(function () use ($value) {
                return $this->model->insert($value);
            });
        }

        try {

            $results = $parallel->wait();

            Db::commit();

            return [true, $results];

        } catch (ParallelExecutionException $e) {
            $results = $e->getResults();
            Db::rollBack();
            return [false, $results];
        }
    }

    /**
     * 更新数据
     * @param $data
     * @param string $key
     * @return array
     */
    public function updateData($data, string $key = 'id'): array
    {
        $object = $this->getDataFindBy($key, $data[$key]);

        try {

            $needsUpdate = $this->inspectUpdateData($object, $data);

            if ($needsUpdate) {
                $object->update($data);
            }

        } catch (\Exception $e) {
            return [false, $e->getMessage()];
        }

        return [true, $object];
    }

    /**
     * 批量更新数据
     * @param $data
     * @param string $key
     * @return array
     */
    public function updateAllData($data, string $key = 'id'): array
    {
        $num = $this->divideByTwo(count($data));

        $parallel = new Parallel($num);

        Db::beginTransaction();

        foreach ($data as $val) {
            $parallel->add(function () use ($key, $val) {
                $object = $this->getDataFindBy($key, $val[$key]);
                $needsUpdate = $this->inspectUpdateData($object, $val);
                if ($needsUpdate) {
                    unset($val[$key]);
                    $object->update($val);
                }
                return $object;
            });
        }

        try {

            $results = $parallel->wait();
            Db::commit();
            return [true, $results];
        } catch (ParallelExecutionException $e) {
            $results = $e->getResults();
            Db::rollBack();
            return [false, $results];
        }
    }

    /**
     * 根据对象批量判断更新
     * @param $object $对象列表
     * @param $data $参数
     * @return array
     */
    public function updateAllDataToObject($object, $data): array
    {
        $dataNum = $object->count();

        $num = $this->divideByTwo($dataNum);

        $parallel = new Parallel($num);

        Db::beginTransaction();

        foreach ($object as $value) {
            $parallel->add(function () use ($value, $data, &$num) {
                $value = $value->fill($data);
                $value->save();
                return $value;
            });
        }

        try {

            $results = $parallel->wait();

            Db::commit();

            return [true, $results];

        } catch (ParallelExecutionException $e) {

            $results = $e->getResults();

            Db::rollBack();

            return [false, $results];
        }
    }

    /**
     * 判断(单个)数据是否更新
     * @param $object
     * @param $data
     * @return bool
     */
    public function filterUpdateData($object, $data): bool
    {
        $update = false;
        foreach ($data as $k => $value) {
            if (is_object($object)) {
                if ($value != $object->$k) {
                    $update = true;
                    $object->$k = $value;
                }
            } else if (is_array($object)) {
                if ($value != $object[$k]) {
                    $update = true;
                    $object[$k] = $value;
                }
            }
        }

        if ($update) $object->save();

        return true;
    }

    /**
     * 删除数据
     * @param $data
     * @return array
     */
    public function deleteData($data): array
    {
        try {

            $this->model->destroy($data);

        } catch (\Exception $e) {

            return [false, $e->getMessage()];
        }

        return [true, '数据已删除'];
    }

    /**
     * 获取单条数据
     * @param $attribute
     * @param $value
     * @param string $symbol
     * @param array $columns
     * @return mixed
     */
    public function getDataFindBy($attribute, $value, string $symbol = '=', array $columns = array('*')): mixed
    {
        return $this->model->where($attribute, $symbol, $value)->first($columns);
    }

    /**
     * 获取数据集
     * @param $attribute
     * @param $value
     * @param string $symbol
     * @param array $columns
     * @return mixed
     */
    public function getDataAllBy($attribute, $value, string $symbol = '=', array $columns = array('*')): mixed
    {
        return $this->model->where($attribute, $symbol, $value)->get($columns);
    }

    /**
     * 获取游标对象
     * @return mixed
     */
    public function getCursorDataAll(): mixed
    {
        return $this->model->cursor();
    }

    /**
     * 获取数据集
     * @param $attribute
     * @param array $value
     * @param array $columns
     * @return mixed
     */
    public function getDataInBy($attribute, array $value, array $columns = array('*')): mixed
    {
        return $this->model->whereIn($attribute, $value)->get($columns);
    }

    /**
     * 执行数据层构造
     * @param array $data
     * @param $model
     * @return mixed
     */
    public function getCount(array $data = [], $model = null): mixed
    {
        return $this->runningSql($data, false, 'count', $model);
    }

    /**
     * 统一执行sql
     * @param array $data
     * @param $get
     * @param $model
     * @param bool $needToArray
     * @param $dataCallBack
     * @return mixed
     */
    public function getData(array $data = [], $get = 'get', $model = null, bool $needToArray = false, &$dataCallBack = null): mixed
    {
        return $this->runningSql($data, $needToArray, $get, $model, $dataCallBack);
    }

    /**
     * 执行底层sql
     * @param $data
     * @param bool $needToArray
     * @param $get
     * @param $object
     * @param $dataCallBack
     * @return mixed
     */
    public function runningSql($data, bool $needToArray = false, $get = 'get', $object = null, &$dataCallBack = null): mixed
    {
        if (!$object) {
            $object = $this->model;
        }

        foreach ($data as $k => $val) {
            if ($get == 'count' && $k == 'skip') continue;
            if ($k == 'with') {
                $object = $object->$k($val);
                continue;
            }

            if ($k == 'skip') {
                $object = $object->skip($val['page'])->take($val['limit']);
                continue;
            }

            switch ($this->array_depth($val)) {
                case 1;
                    $object = $object->$k(...$val);
                    break;
                case 2;
                    if ($k == 'whereIn' || $k == 'whereBetween') {
                        $object = $object->$k(...$val);
                    } else if ($k == 'where' || $k == 'orderBy') {
                        foreach ($val as $vv) {
                            $object = $object->$k(...$vv);
                        }
                    } else {
                        $object = $object->$k($val);
                    }
                    break;
                case 3;
                    foreach ($val as $vv) {
                        $object = $object->$k(...$vv);
                    }
                break;
            }
        }

        if ($get == 'chunk') {
//            $object->$get(200, function ($value) use (&$dataCallBack) {
//                foreach ($value as $val) {
//                    $dataCallBack[] = $val->toArray();
//                }
//            });
            return $object;
        }

        if ($get == 'cursor') {
//            foreach ($object->$get() as $flight) {
//                if ($needToArray) $flight = $flight->toArray();
//                $dataCallBack[] = $flight;
//            }
            return $object;
        }

        if (is_array($get)) {
            $key = key($get);
            $list = $object->$key($get[$key]);
            $get = $key;
        } else {
            $list = $object->$get();
        }

        switch ($get) {
            case 'pluck':
            case 'first':
                if ($list && $needToArray) $list = $list->toArray();
                break;
            case 'get':
                if ($needToArray) $list = $list->toArray();
                break;
        }

        return $list;
    }

    /**
     * 判断数据是否二维或者一维数组
     * @param $array
     * @return int
     */
    public function array_depth($array): int
    {
        if (!is_array($array)) {
            return 0;
        }

        $depth = 1;
        $queue = new SplQueue();
        array_walk($array, function ($element) use ($queue) {
            if (is_array($element)) {
                $queue->enqueue($element);
            }
        });

        while (!$queue->isEmpty()) {
            $currentLevelSize = $queue->count();
            for ($i = 0; $i < $currentLevelSize; $i++) {
                $current = $queue->dequeue();
                array_walk($current, function ($element) use ($queue) {
                    if (is_array($element)) {
                        $queue->enqueue($element);
                    }
                });
            }
            $depth++;
        }

        return $depth;
    }

    /**
     * 根据数组条数获取/2得协程数,最大限制 50个协程运行
     * @param $number
     * @param int $num
     * @param int $max
     * @return int
     */
    public function divideByTwo($number, int $num = 2, int $max = 50): int
    {
        $num = intdiv($number, $num);

        if ($num > $max) {
            $num = $max;
        }

        return $num;
    }

    /**
     * 判断数据是否需要更新
     * @param $object
     * @param $data
     * @return bool
     */
    public function inspectUpdateData($object, $data): bool
    {
        // 标识是否需要更新
        $needsUpdate = false;

        // 遍历客户端传来的数据
        foreach ($data as $key => $value) {
            // 检查是否存在该字段且与数据库中的值不一致
            if (array_key_exists($key, $object->getAttributes()) && $object->$key != $value) {
                $needsUpdate = true; // 标记需要更新
            }
        }

        return $needsUpdate;
    }
}