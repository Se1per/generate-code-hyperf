<?php

declare(strict_types=1);

namespace App\Base;

use App\Base\src\RepositoryPackage;
use Hyperf\Cache\Listener\DeleteListenerEvent;
use Hyperf\Context\Context;
use Carbon\Carbon;
use Psr\EventDispatcher\EventDispatcherInterface;
use Hyperf\Di\Annotation\Inject;

abstract class BaseRepository extends RepositoryPackage
{
    protected $model;
    protected $user;

    // #[Inject]
    // protected EventDispatcherInterface $dispatcher;

    #[Inject]
    protected BaseRedis $redis;

    public function getUserToken()
    {
        return Context::get('user_info');
    }

    /**
     * 构造查询条件
     * @param $makeData
     * @return array
     */
    public function selectArray($makeData): array
    {
        $sql = [];
        foreach ($makeData as $k => $val) {
            if (isset($val)) {
                if ($k == 'page' && count($sql) <= 2) {
                    $data = $this->pageLimit($makeData);

                    $sql['skip']['page'] = $data['page'];
                    $sql['skip']['limit'] = $data['limit'];
                }
                switch ($k) {
                    case 'id':
                        if (!is_array($val)) {
                            $sql['where'][] = $this->convertToWhereQuery($k, '=', $val);
                        } else {
                            $sql['whereIn'][] = $this->convertToWhereQuery($k, 'in', $val);
                        }
                    break;
                    case 'created_at':
                    case 'updated_at':
                        if (is_array($val)) {
                            $sql['whereBetween'] = $this->convertToWhereQuery($k, 'in', $val);
                        } else {
                            $sql['whereDate'] = $this->convertToWhereQuery($k, '=', $val);
                        }
                    break;
                }
            }
        }
        return $sql;
    }

    /**
     * 构造查询条件
     * @param $column string 字段
     * @param $operator string 运算符
     * @param $val array|string|int|bool 值
     * @param $operatorName string|null 关系默认 and 可选 or
     * @return array|bool|int|string
     * User: Se1per
     * Date: 2023/8/4 11:07
     */
    public function convertToWhereQuery(string $column, string $operator,array|string|int|bool $val, string $operatorName = null): array|bool|int|string
    {
        if (is_string($val)) {
            switch ($val) {
                case 'today':
                    $val = Carbon::today();
                    break;
                case 'yesterday':
                    $val = Carbon::yesterday();
                    break;
                case 'tomorrow':
                    $val = Carbon::tomorrow();
                break;
            }
        }

        switch ($operator) {
            case 'like':
                return [$column, $operator, '%' . $val . '%', 'or'];
            case 'date':
            case 'day':
            case 'month':
            case 'year':
            case '=':
            case '<>':
            case '>':
            case '<':
            case '<=':
            case '>=':
                if ($operatorName) return [$column, $operator, $val, $operatorName];
                return [$column, $operator, $val];
            case 'exists':
            case 'func':
            case 'raw':
                return $val;
            case 'notNull':
                return $column;
            case 'order':
            case 'orderBy':
                switch ($val) {
                    case '0':
                        return [$column, 'asc'];
                    default:
                        return [$column, 'desc'];
                }
            default://in notIn
                return [$column, $val];
        }
    }

    /**
     * 分页兑换参数
     * @param array $data
     * @return array
     */
    public function pageLimit(array $data): array
    {
        $data['page'] = $data['page'] ?? 1;

        $data['limit'] = $data['pageSize'] ?? 10;

        $data['page'] = ($data['page'] - 1) * $data['limit'];

        return $data;
    }

    public function flushCache($listener)
    {
        $userNameAll = $this->redis->hGetAll('cache:'.$listener);
        $key = array_values($userNameAll);
        $dispatcher = $this->container->get(EventDispatcherInterface::class);
        $dispatcher->dispatch(new DeleteListenerEvent($listener, $key));

        return true;
    }
}