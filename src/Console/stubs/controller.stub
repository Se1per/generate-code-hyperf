<?php

namespace {{ namespace }};

use {{ base }}\BaseController;
use {{ request }}\{{ table }}Request;
use {{ service }}\{{ table }}Service;
use App\Constants\CodeConstants;
use App\Exception\ApiException;

use Hyperf\Di\Annotation\Inject;
use Hyperf\HttpServer\Annotation\Controller;
use Hyperf\HttpServer\Annotation\RequestMapping;
use Hyperf\Validation\Annotation\Scene;
use Japool\Genconsole\ReturnCall\Annotation\ReturnAnnotation;

#[Controller(prefix: '/api/{{ prefix }}', server: '{{ server }}')]
class {{ class }} extends BaseController
{
    #[Inject]
    private ?{{ table }}Service $service;

    #[RequestMapping(path: 'save{{ table }}Data', methods: 'Post')]
    #[Scene(scene: 'save')]
    #[ReturnAnnotation]
    public function save{{ table }}Data({{ table }}Request $request): string|array|\Psr\Http\Message\ResponseInterface
    {
        $object =  $this->service->save{{ table }}Data($request->validated());

        if($object){
            return [CodeConstants::Success];
        }
        throw new ApiException(CodeConstants::WARNING,$object);
    }

    #[RequestMapping(path: 'del{{ table }}Data', methods: 'put')]
    #[Scene(scene: 'del')]
    #[ReturnAnnotation]
    public function del{{ table }}Data({{ table }}Request $request): string|array|\Psr\Http\Message\ResponseInterface
    {
        $object = $this->service->del{{ table }}Data($request->validated());

        if($object){
            return [CodeConstants::Success];
        }
        throw new ApiException(CodeConstants::WARNING,$object);
    }

    #[RequestMapping(path: 'get{{ table }}Data', methods: 'GET')]
    #[Scene(scene: 'get')]
    #[ReturnAnnotation]
    public function get{{ table }}Data({{ table }}Request $request): string|array|\Psr\Http\Message\ResponseInterface
    {
        [$list,$total] = $this->service->get{{ table }}Data($request->validated());

        return [CodeConstants::Success,null,$list,$total];
    }
}
